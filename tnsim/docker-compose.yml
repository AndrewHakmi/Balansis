version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tnsim-postgres
    environment:
      POSTGRES_DB: tnsim
      POSTGRES_USER: tnsim_user
      POSTGRES_PASSWORD: tnsim_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - tnsim-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tnsim_user -d tnsim"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tnsim-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tnsim-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # TNSIM API Service
  tnsim-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: tnsim-api
    environment:
      - DATABASE_URL=postgresql://tnsim_user:tnsim_password@postgres:5432/tnsim
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - CACHE_TTL=3600
      - MAX_WORKERS=4
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - tnsim-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Jupyter Notebook Service (Development)
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: tnsim-jupyter
    environment:
      - DATABASE_URL=postgresql://tnsim_user:tnsim_password@postgres:5432/tnsim
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - JUPYTER_ENABLE_LAB=yes
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - jupyter_data:/home/tnsim/.jupyter
    networks:
      - tnsim-network
    depends_on:
      - postgres
      - redis
    command: >
      bash -c "jupyter lab --ip=0.0.0.0 --port=8888 --no-browser 
               --allow-root --NotebookApp.token='' --NotebookApp.password=''"
    profiles:
      - development

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tnsim-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - tnsim-network
    depends_on:
      - tnsim-api
    profiles:
      - production

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tnsim-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - tnsim-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: tnsim-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - tnsim-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  jupyter_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  tnsim-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16